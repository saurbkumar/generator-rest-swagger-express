{
  "openapi": "3.0.0",
  "info": {
    "title": "<%= serviceName %> API",
    "description": "<%= description %>",
    "version": "<%= version %>"
  },
  "servers": [
    {
      "url": "/v1/<%= objectNameLowerCase %>-service"
    }
  ],
  "tags": [
    {
      "name": "<%= objectName %>s",
      "description": "Everything about your <%= objectNameLowerCase %>s"
    }
  ],
  "paths": {
    "/metrics": {
      "x-controller": "metricController",
      "get": {
        "tags": ["Application"],
        "summary": "Get application metrics",
        "operationId": "getMetrics",
        "description": "Get all application metrics",
        "x-dont-log": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "User information",
            "content": {
              "application/text": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/Metrics"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/app/ready": {
      "x-controller": "healthController",
      "get": {
        "tags": ["Application Health"],
        "summary": "Get application ready",
        "operationId": "getReady",
        "description": "Get app ready status",
        "x-dont-log": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get app ready status to serve the traffic",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/Ready"
                }
              }
            }
          },
          "503": {
            "description": "App is not healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "$ref": "#/components/schemas/Ready"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/app/live": {
      "x-controller": "healthController",
      "get": {
        "tags": ["Application Health"],
        "summary": "Get application live",
        "operationId": "getLive",
        "description": "Get app live status",
        "x-dont-log": false,
        "parameters": [],
        "responses": {
          "200": {
            "description": "live status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Live"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/<%= objectNameLowerCase %>s": {
      "x-controller": "controller",
      "get": {
        "tags": ["<%= objectName %>s"],
        "summary": "Get all <%= objectNameLowerCase %>s",
        "operationId": "get<%= objectName %>s",
        "description": "Get all <%= objectNameLowerCase %>s",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "description": "Number of records to return",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "Number of records to skip",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Filter records using sql like where clause. For all the available clause see readme. \n For the allowed filter fields check your queryHooks file",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          },
          {
            "name": "$sortBy",
            "in": "query",
            "description": "This will sort documents by the database filed, default is no sort \n <br> Format is '+/-dbField'. '+' is for ascending and '-' is for descending order. <br> Ex '+age -name' will sort documents by age(ascending) and name(descending)",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1,
              "maxLength": 30
            }
          },
          {
            "name": "$projection",
            "in": "query",
            "description": "Remove fields. Use '-' for removal. <br> EX: -name -age, will remove name and age ",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<%= objectName %>s information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/<%= objectName %>s"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["<%= objectName %>s"],
        "summary": "Create <%= objectNameLowerCase %>",
        "description": "Create a <%= objectNameLowerCase %>",
        "operationId": "create<%= objectName %>",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Create<%= objectName %>"
                  }
                ],
                "required": ["name", "address", "age"]
              }
            }
          },
          "description": "Created <%= objectNameLowerCase %> object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "<%= objectName %> information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/<%= objectName %>"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["<%= objectName %>s"],
        "summary": "Delete <%= objectNameLowerCase %>",
        "description": "Delete all <%= objectNameLowerCase %>s",
        "operationId": "delete<%= objectName %>s",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "description": "Delete records using sql like where clause. For all the available clause see readme. \n For the allowed filter fields check your queryHooks file",
            "required": false,
            "schema": {
              "type": "string",
              "minLength": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "counts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["count"],
                  "properties": {
                    "count": {
                      "type": "integer",
                      "description": "number of records deleted"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/<%= objectNameLowerCase %>s/{id}": {
      "x-controller": "controller",
      "get": {
        "tags": ["<%= objectName %>s"],
        "summary": "Get a <%= objectNameLowerCase %>",
        "operationId": "get<%= objectName %>",
        "description": "Get a <%= objectNameLowerCase %> by Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of <%= objectNameLowerCase %>",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 12
            }
          }
        ],
        "responses": {
          "200": {
            "description": "<%= objectName %> information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/<%= objectName %>"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["<%= objectName %>s"],
        "summary": "Update <%= objectNameLowerCase %>",
        "description": "Update a <%= objectNameLowerCase %>",
        "operationId": "update<%= objectName %>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of <%= objectNameLowerCase %>",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 12
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Create<%= objectName %>"
                  }
                ]
              }
            }
          },
          "description": "Update <%= objectNameLowerCase %> object",
          "required": true
        },
        "responses": {
          "200": {
            "description": "<%= objectName %> information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/<%= objectName %>"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["<%= objectName %>s"],
        "summary": "Delete a <%= objectNameLowerCase %>",
        "description": "Delete a <%= objectNameLowerCase %>s by Id",
        "operationId": "delete<%= objectName %>",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of <%= objectNameLowerCase %>",
            "required": true,
            "schema": {
              "type": "string",
              "maxLength": 12
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No information"
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "<%= objectName %>": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "user id"
          },
          "name": {
            "type": "string",
            "description": "user name"
          },
          "address": {
            "type": "string",
            "description": "user address"
          },
          "country": {
            "type": "string",
            "description": "user country"
          },
          "age": {
            "type": "integer",
            "description": "user age"
          },
          "createdAt": {
            "type": "string",
            "description": "user creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "description": "user update timestamp"
          },
          "isActive": {
            "type": "boolean",
            "description": "user is active or not",
            "example": false
          },
          "metadata": {
            "type": "object",
            "example": { "property1": 10 }
          }
        }
      },
      "<%= objectName %>s": {
        "type": "object",
        "required": ["count", "value", "links", "last", "previous", "next"],
        "properties": {
          "count": {
            "type": "integer",
            "example": 10
          },
          "value": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/<%= objectName %>"
                }
              ],
              "required": ["id", "name", "address", "age"]
            }
          },
          "first": {
            "type": "object",
            "description": "pagination records first link",
            "required": ["href"],
            "properties": {
              "href": {
                "type": "string",
                "description": "paginated data link",
                "example": "http://localhost:3000/v1/<%= objectName %>s?$top=10&$skip=0"
              }
            }
          },
          "last": {
            "type": "object",
            "description": "pagination records last link",
            "required": ["href"],
            "properties": {
              "href": {
                "type": "string",
                "description": "paginated data link",
                "example": "http://localhost:3000/v1/<%= objectName %>s?$top=10&$skip=20"
              }
            }
          },
          "previous": {
            "type": "object",
            "description": "pagination records previous link",
            "required": ["href"],
            "properties": {
              "href": {
                "type": "string",
                "description": "paginated data link",
                "example": "http://localhost:3000/v1/<%= objectName %>s?$top=10&$skip=0"
              }
            }
          },
          "next": {
            "type": "object",
            "description": "pagination records next link",
            "required": ["href"],
            "properties": {
              "href": {
                "type": "string",
                "description": "paginated data link",
                "example": "http://localhost:3000/v1/<%= objectName %>s?$top=10&$skip=10"
              }
            }
          }
        }
      },
      "Create<%= objectName %>": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "<%= objectNameLowerCase %> name",
            "pattern": "^[A-Za-z0-9_ ]+$",
            "example": "Bob"
          },
          "address": {
            "type": "string",
            "pattern": "^[A-Za-z0-9_ ]+$",
            "description": "<%= objectNameLowerCase %> address",
            "example": "Address"
          },
          "country": {
            "type": "string",
            "pattern": "^[A-Za-z ]+$",
            "description": "<%= objectNameLowerCase %> country",
            "example": "USA"
          },
          "age": {
            "type": "integer",
            "description": "<%= objectNameLowerCase %> age",
            "minimum": 0,
            "maximum": 150,
            "example": 30
          },
          "isActive": {
            "type": "boolean",
            "description": "<%= objectNameLowerCase %> is active or not",
            "example": false
          },
          "metadata": {
            "type": "object",
            "example": { "property1": 10 }
          }
        }
      },
      "Metrics": {
        "type": "string",
        "example": "# HELP userservice_process_cpu_user_seconds_total Total user CPU time spent in seconds. \n# TYPE userservice_process_cpu_user_seconds_total counter\n userservice_process_cpu_user_seconds_total{NODE_APP_INSTANCE='abcd'} 182.82899999999137"
      },
      "Ready": {
        "type": "object",
        "required": ["status", "components"],
        "properties": {
          "status": {
            "type": "string",
            "description": "App health status",
            "example": "App is healthy"
          },
          "components": {
            "type": "array",
            "description": "Application Ready components",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ReadyComponents"
                }
              ]
            }
          }
        }
      },
      "ReadyComponents": {
        "type": "object",
        "required": ["status", "name"],
        "properties": {
          "status": {
            "type": "string",
            "example": "db working fine"
          },
          "name": {
            "type": "string",
            "example": "db database"
          }
        }
      },
      "Live": {
        "type": "object",
        "description": "Application live status",
        "properties": {
          "status": {
            "type": "string",
            "example": "ok"
          }
        }
      },
      "Error": {
        "properties": {
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    }
  }
}
